--1.4.0_b6
--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

--Network Settings

local bMenuLoop = true

while bMenuLoop == true do
	local tChoices = {
		{["display"] = "Stop Server", ["id"] = "close_server", ["selectable"] = true},
		{["display"] = "", ["selectable"] = false}
	}
	for k, v in pairs(WDM.readServerTemp()) do
		if v == true then
			local sModule = string.sub(k, 1, string.find(k, "_") - 1)
			local sDisplay = string.upper(string.sub(sModule, 1, 1)) .. string.sub(sModule, 2)
			if WDM.readServerData(sModule .. "_state") then
				table.insert(tChoices, {["display"] = sDisplay .. " Module: ON", ["id"] = sModule, ["selectable"] = true})
			else
				table.insert(tChoices, {["display"] = sDisplay .. " Module: OFF", ["id"] = sModule, ["selectable"] = true})
			end
		end
	end
	
	local tActions = {
		["close_server"] = function()
			WUI.clear("Control Panel")
			WUI.slowPrint("Stopping Server...", nil, nil, true)
			WDM.writeServerData(false, "server_state")
			bMenuLoop = false
		end,
		["return"] = function()
			bMenuLoop = false
		end
	}
	local sSelection = WUI.menu(tChoices, "Server Settings", "Control Panel", true)
	if tActions[sSelection] then
		tActions[sSelection]()
	else
		if WDM.readServerData(sSelection .. "_state") then
			WDM.writeServerData(false, sSelection .. "_state")
		else
			WDM.writeServerData(true, sSelection .. "_state")
		end
	end
end
os.run({}, WDM.getSystemDir("control_panel") .. "network/main")