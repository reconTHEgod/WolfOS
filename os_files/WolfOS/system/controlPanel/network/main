--1.4.0_b6
--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

--Network Settings

local bMenuLoop = true

local getSide = function()
	while true do
		local tChoices = {}
		for _, v in ipairs(WPH.getAllPeripherals("modem")) do
			local sSide = v.port
			if WPH.getType(sSide) == "modem" then
				local sSide = string.upper(string.sub(sSide, 1, 1)) .. string.sub(sSide, 2)
				table.insert(tChoices, {["display"] = sSide, ["id"] = string.lower(sSide), ["selectable"] = true})
			end
		end
		local sSelection = WUI.menu(tChoices, "Network Ports", "Control Panel", true, {["peripheral"] = WPH.getValidSides(), ["peripheral_detach"] = WPH.getValidSides()})
		if sSelection == "return" then
			break
		elseif sSelection ~= "peripheral" and sSelection ~= "peripheral_detach" then
			return sSelection
		end
	end
	return nil
end

while bMenuLoop == true do
	local sPort = WDM.readSystemData("modem_port") or ""
	local sServerID = WDM.readSystemData("server_id") or ""
	local sRelayID = WDM.readSystemData("relay_id") or ""
	if WDM.readSystemData("offline") then
		sPort = "CLOSED"
	elseif WDM.readServerData("server_state") then
		sServerID = "N/A"
	end
				
	local tChoices = {
		{["display"] = "Network Port: " .. string.upper(string.sub(sPort, 1, 1)) .. string.sub(sPort, 2), ["selectable"] = false},
		{["display"] = "Server ID#: " .. sServerID, ["selectable"] = false},
		{["display"] = "Relay ID#: " .. sRelayID, ["selectable"] = false},
		{["display"] = "", ["selectable"] = false},
		{["display"] = "Change network port", ["id"] = "change_port", ["selectable"] = true}
	}
	if WDM.readSystemData("offline") or not WDM.readSystemData("modem_port") then
		table.insert(tChoices, {["display"] = "Open network port", ["id"] = "open_port", ["selectable"] = true})
	else
		WDM.mergeTables(tChoices, {
			{["display"] = "Close network port", ["id"] = "close_port", ["selectable"] = true},
			{["display"] = "", ["selectable"] = false}
		})
		if WDM.readServerData("server_state") then
			WDM.mergeTables(tChoices, {
				{["display"] = "Server settings", ["id"] = "server_cfg", ["selectable"] = true},
				{["display"] = "", ["selectable"] = false}
			})
		else
			WDM.mergeTables(tChoices, {
				{["display"] = "Start Server", ["id"] = "open_server", ["selectable"] = true},
				{["display"] = "", ["selectable"] = false}
			})
			if WDM.readSystemData("server_id") then
				table.insert(tChoices, {["display"] = "Disconnect from Server", ["id"] = "server_disconnect", ["selectable"] = true})
			else
				table.insert(tChoices, {["display"] = "Connect to Server", ["id"] = "server_connect", ["selectable"] = true})
			end
		end
		if WDM.readSystemData("relay_id") then
			table.insert(tChoices, {["display"] = "Disconnect from Relay", ["id"] = "relay_disconnect", ["selectable"] = true})
		else
			table.insert(tChoices, {["display"] = "Connect to Relay", ["id"] = "relay_connect", ["selectable"] = true})
		end
		table.insert(tChoices, {["display"] = "Test connections", ["id"] = "test_connect", ["selectable"] = true})
	end
	
	
	local tActions = {
		["change_port"] = function()
			local sSide = getSide()
			if sSide then
				WDM.writeSystemData(sSide, "modem_port")
			end
		end,
		["open_port"] = function()
			local sSide = WDM.readSystemData("modem_port")
			if not sSide or WPH.getType(sSide) ~= "modem" then
				sSide = getSide()
			end
			if sSide then
				WDM.writeSystemData(false, "offline")
				WDM.writeSystemData(sSide, "modem_port")
				rednet.open(sSide)
			end
		end,
		["close_port"] = function()
			WDM.writeSystemData(true, "offline")
			local sSide = WDM.readSystemData("modem_port")
			if sSide then
				rednet.close(sSide)
			end
		end,
		["server_connect"] = function()
			WUI.clear("Control Panel")
			WUI.slowPrint("Enter Server ID#:", 1, 4)
			WUI.slowPrint(">", 1, 6)
			local t = WUI.getText({
				{["x"] = 3, ["y"] = 6, ["width"] = 16, ["height"] = 1, ["pattern"] = "%d", ["hidden"] = false, ["editable"] = true}
			})
			if t then
				local nServerID = tonumber(t[1]["contents"][1])
				WUI.clear("Control Panel")
				WUI.slowPrint("Connecting to Server...", nil, nil, true)
				WNC.send(nServerID, "connection_request", "client_connection")
				local nSenderID, _, sEvent, p1 = WNC.receive(nServerID, 5)
				WUI.clear("Control Panel")
				if sEvent == "connection_success" then
					WDM.writeSystemData(nServerID, "server_id")
					WUI.slowPrint("Connected to Server.", nil, nil, true)
					if WDM.readSystemTemp("local_user") then bMenuLoop = false WUI.logout() end
				elseif sEvent == "connection_failure" then
					WUI.slowPrint("Could not connect to Server:\n")
					WUI.slowPrint("> " .. sEvent .. ": " .. p1 .. "\n")
					WUI.slowPrint("Press any key to continue...")
					os.pullEvent("key") 
				end
			end
		end,
		["server_disconnect"] = function()
			WDM.writeSystemData(nil, "server_id")
			if not WDM.readSystemTemp("local_user") then bMenuLoop = false WUI.logout() end
		end,
		["relay_connect"] = function()
			WUI.clear("Control Panel")
			WUI.slowPrint("This feature has not been implemented yet.", nil, nil, true)
		end,
		["relay_disconnect"] = function()
			WUI.writeSystemData(nil, "relay_id")
		end,
		["test_connect"] = function()
			WUI.clear("Control Panel")
			WUI.slowPrint("Testing Connections...", nil, nil, true)
			local nServerID = WDM.readSystemData("server_id")
			if not WDM.readServerData("server_state") and nServerID then
				WNC.send(nServerID, "connection_request", "test_connection")
				local nSenderID, _, sEvent, p1 = WNC.receive(nServerID, 5)
				WUI.clear("Control Panel")
				if sEvent == "connection_response" then
					WUI.slowPrint("Server connection OK.", nil, nil, true)
				else
					WUI.slowPrint("Could not connect to Server: \n")
					WUI.slowPrint("> " .. sEvent .. ": " .. p1 .. "\n")
					WUI.slowPrint("Press any key to continue...")
					os.pullEvent("key") 
				end
			end
		end,
		["open_server"] = function()
			WUI.clear("Control Panel")
			WUI.slowPrint("Starting Server...", nil, nil, true)
			WDM.writeServerData(true, "server_state")
			if not WDM.readSystemTemp("local_user") then bMenuLoop = false WUI.logout() end
		end,
		["server_cfg"] = function()
			bMenuLoop = false
			os.run({}, WDM.getSystemDir("control_panel") .. "network/server_cfg")
		end,
		["return"] = function()
			bMenuLoop = false
		end
	}
	local sSelection = WUI.menu(tChoices, "Network", "Control Panel", true)		
	tActions[sSelection]()
end
os.run({}, WDM.getSystemDir("control_panel") .. "main")