--1.4.0_b6
--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

if not os.getComputerLabel() then
	os.setComputerLabel("ID# " .. os.getComputerID())
end
print("Loading APIs...")
sleep(0.01)
for _, sAPI in ipairs(fs.list("/WolfOS/system/apis")) do
	os.loadAPI("/WolfOS/system/apis/" .. sAPI)
	print("System API loaded: " .. sAPI)
end
local sModemPort = WDM.readSystemData("modem_port")
if sModemPort then
	if WPH.getType(sModemPort) ~= "modem" then
		WDM.writeSystemData(nil, "modem_port")
	elseif WDM.readSystemData("modem_state") and WPH.getType(sModemPort) == "modem" then
		print("Initiating modem...")
		rednet.open(sModemPort)
	end
end
local tModules = {}
print("Initiating Server...")
local loadModule = function(sType)
	WDM.writeServerTemp(true, sType .. "_module")
	return function() os.run({}, WDM.getSystemDir("server") .. sType) end
end
for _, sModule in ipairs(fs.list(WDM.getSystemDir("server"))) do
	if not fs.isDir(WDM.getSystemDir("server") .. sModule) then
		tModules[#tModules + 1] = loadModule(sModule)
		print("Server module loaded: " .. sModule)
	end
end
local sMonitorPort = WDM.readSystemData("monitor_port")
if sMonitorPort then
	if WPH.getType(sMonitorPort) ~= "monitor" then
		WDM.writeSystemData(nil, "monitor_port")
	elseif WDM.readSystemData("monitor_state") and WPH.getType(sMonitorPort) == "monitor" then
		sync.redirect(true)
		print("Synchronising with monitor...")
		sync.addMonitor(sMonitorPort)
	end
end
print("Starting WolfOS...")
print("Loading User Interface...")
sleep(0.01)
WUI.bootScreen("Initiating WolfOS", "Please wait...")
WUI.showClock(true)
local runOS = function()
	if fs.isDir(WDM.getSystemDir("data") .. "users") and WDM.exists(WDM.getSystemDir("data") .. "users.dat") then
		os.run({}, WDM.getSystemDir("system") .. "startupMenu")
	else
		os.run({}, WDM.getSystemDir("system") .. "setup")
	end
end
local runClock = WUI.setupClock()
local runCoreModule = function()
	while true do
		local nSenderID, nDistance, sEvent, p1, p2, p3, p4, p5 = WNC.receive()
		if not WDM.readSystemData("offline") then
			if sEvent == "connection_request" then
				if p1 == "client_connection" and WDM.readServerData("server_state") then
					WNC.send(nSenderID, "connection_success")
				elseif p1 == "test_connection" then
					WNC.send(nSenderID, "connection_response")
				end
			end
		else
			sleep(1)
		end
	end
end
	
parallel.waitForAny(runOS, runClock, runCoreModule, unpack(tModules))