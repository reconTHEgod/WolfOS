--1.4.0_b6
--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

--WolfOS Account Utilities

local tUsers = {}

function generateUID()
	local sUID = ""
	local _t = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"}
	math.randomseed(os.getComputerID() + os.clock())
	for nChar = 1, 8 do
		if math.random(0, 1) == 0 then
			sUID = sUID .. _t[math.random(1, 10)]
		else
			sUID = sUID .. _t[math.random(11, 36)]
		end
	end
	return sUID
end

function exists(sUser)
	if not WDM.readSystemData("offline") and WDM.readSystemData("server_id") and not WDM.readServerData("server_state") then
		WNC.send(WDM.readSystemData("server_id"), "data_request", "user_list")
		_, _, _, tUsers = WNC.receive(WDM.readSystemData("server_id"), 5)
	elseif #tUsers == 0 then
		tUsers = textutils.unserialize(encryption.fromBase64(WDM.readAllText(WDM.getSystemDir("data") .. "users.dat")))
	end
	if type(tUsers) == "table" then
		for nUser, tUser in ipairs(tUsers) do
			if sUser == tUser.uid or sUser == tUser.name then
				return tUser, nUser
			end
		end
	end
	return nil
end

function createUser(sName, sHash)
	if not WDM.readSystemData("offline") and WDM.readSystemData("server_id") and not WDM.readServerData("server_state") then
		WNC.send(WDM.readSystemData("server_id"), "data_push", "new_user", sName, sHash)
	else
		local sUID = generateUID()
		tUsers[#tUsers + 1] = {["uid"] = sUID, ["name"] = sName, ["hash"] = sHash, ["type"] = "user"}
		WDM.fWrite(WDM.getSystemDir("data") .. "users.dat", encryption.toBase64(textutils.serialize(tUsers)))
		fs.makeDir(WDM.getSystemDir("users") .. sUID .. "/")
		WDM.fWrite(WDM.getSystemDir("users") .. sUID .. "/email.dat", encryption.toBase64(textutils.serialize({})))
	end
end

function removeUser(sUID)
	if not WDM.readSystemData("offline") and WDM.readSystemData("server_id") and not WDM.readServerData("server_state") then
		WNC.send(WDM.readSystemData("server_id"), "data_push", "remove_user", sUID)
	else
		local tUser, nUser = exists(sUID)
		if tUser then
			tUsers[nUser] = nil
			WDM.fWrite(WDM.getSystemDir("data") .. "users.dat", encryption.toBase64(textutils.serialize(tUsers)))
			fs.delete(WDM.getSystemDir("users") .. sUID .. "/")
		end
	end
end

function changeUserData(sUID, sIndex, sString)
	if not WDM.readSystemData("offline") and WDM.readSystemData("server_id") and not WDM.readServerData("server_state") then
		WNC.send(WDM.readSystemData("server_id"), "data_push", "update_user", sUID, sIndex, sString)
	else
		local tUser, nUser = exists(sUID)
		if tUser then
			tUser[sIndex] = sString
			tUsers[nUser] = tUser
			WDM.fWrite(WDM.getSystemDir("data") .. "users.dat", encryption.toBase64(textutils.serialize(tUsers)))
		end
	end
end

function checkLogin(sName, sHash)
	local tUser
	if not WDM.readSystemData("offline") and WDM.readSystemData("server_id") and not WDM.readServerData("server_state") then
		WNC.send(WDM.readSystemData("server_id"), "connection_request", "user_connection", sName, sHash)
		local nSenderID, _, sEvent, p1 = WNC.receive(WDM.readSystemData("server_id"), 5)
		if sEvent ~= "connection_success" then
			return nil, sEvent, p1
		end
		WDM.writeSystemTemp(false, "local_user")
		tUser = p1
	else
		WDM.writeSystemTemp(true, "local_user")
		tUser = exists(sName)
	end
	if tUser then
		if sName == tUser.name and sHash == tUser.hash then
			return tUser, nil, nil
		end
	end
	return nil, nil, "invalid_user"
end