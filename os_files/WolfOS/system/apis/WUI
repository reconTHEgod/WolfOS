--1.4.0_b6
--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

--WolfOS User Interface Library

local tColourScheme = {}

if term.isColour() then
	tColourScheme = {
		cursor = colours.white,
		cursor_inverse = colours.blue,
		screen = colours.blue,
		screen_inverse = colours.white,
		screen_text = colours.white,
		screen_text_inverse = colours.blue,
		statusbar = colours.white,
		statusbar_inverse = colours.blue,
		statusbar_text = colours.blue,
		statusbar_text_inverse = colours.white
	}
else
	tColourScheme = {
		cursor = colours.white,
		cursor_inverse = colours.black,
		screen = colours.black,
		screen_inverse = colours.white,
		screen_text = colours.white,
		screen_text_inverse = colours.black,
		statusbar = colours.white,
		statusbar_inverse = colours.black,
		statusbar_text = colours.black,
		statusbar_text_inverse = colours.white
	}
end

--Basic functions

function getScreenWidth()
	local w = term.getSize()
	return w
end

function getScreenHeight()
	local w, h = term.getSize()
	return h
end

function fastWrite(sString, x, y)
	x = x or 1
	y = y or 1
	
	term.setCursorPos(x, y)
	term.write(sString)
end

function slowWrite(sString, x, y)
	x = x or 1
	y = y or 1
	
	term.setCursorPos(x, y)
	
	while #sString > 0 do
		local whitespace = string.match(sString, "^[ \t]+")
		if whitespace then
			term.write(whitespace)
			x, y = term.getCursorPos()
			sString = string.sub(sString, #whitespace + 1)
		end
		local text = string.match(sString, "^[^ \t\n]+")
		if text then
			term.write(text)
			x, y = term.getCursorPos()
			sString = string.sub(sString, #text + 1)
			sleep(0.01)
		end
	end
end

function clear()
	term.clear()
	term.setCursorPos(1, 1)
end

--Frame functions

local currentFrame

function redrawCurrentFrame()
	term.setBackgroundColour(currentFrame.background_colour)
	clear()
	
	for k, v in ipairs(currentFrame.objects) do
		term.setBackgroundColour(currentFrame.background_colour)
		v:redraw()
	end
end

function setCurrentFrame(frame)
	if type(frame) == "table" and frame.type == "frame" then
		currentFrame = frame
		redrawCurrentFrame()
	end
end

function runCurrentFrame()
	local currentObject = nil
	local currentObjectNum = 0
	
	for _, v in ipairs(currentFrame.objects) do
		if v.hasFocus then v:setFocused(false) end
	end
	
	local function next()
		for k = currentObjectNum + 1, #currentFrame.objects, 1 do
			local v = currentFrame.objects[k]
			if v.hasFocus then
				if currentObject then currentObject:setFocused(false) end
				currentObject = v
				currentObjectNum = k
				currentObject:setFocused(true)
				return true
			end
		end
		return false
	end
	
	local function prev()
		for k = currentObjectNum - 1, 1, -1 do
			local v = currentFrame.objects[k]
			if v.hasFocus then
				if currentObject then currentObject:setFocused(false) end
				currentObject = v
				currentObjectNum = k
				currentObject:setFocused(true)
				return true
			end
		end
		return false
	end
	
	while true do
		redrawCurrentFrame()
		local _, p1 = os.pullEvent("key")
		-- Global key presses checked first
		if p1 == keys.leftCtrl then
			if not next() then
				while prev() do end
			end
		elseif p1 == keys.rightCtrl or p1 == 157 then -- keys.rightCtrl doesn't seem to work on a UK keyboard
			if not prev() then
				while next() do end
			end
		-- Object specific key presses checked here
		elseif currentObject then
			if currentObject.object_type == "button" then
				if p1 == keys.enter and currentObject:isEnabled() then
					return currentObject:action_listener()
				end
			end
		end
	end
end

function newFrame(frameID)
	local tFrame = {
		["name"] = frameID,
		["type"] = "frame",
		["objects"] = {},
		["background_colour"] = tColourScheme.screen,
		["setBackgroundColour"] = function(self, c)
			if type(c) == "number" then
				self.background_colour = c
			elseif colours[c] then
				self.background_colour = colours[c]
			end
		end,
		["add"] = function(self, object, x, y)
			object.x = x
			object.y = y
			
			if #self.objects > 0 then
				for k, v in ipairs(self.objects) do
					if y < v.y then
						table.insert(self.objects, k, object)
						break
					elseif y == v.y then
						if x < v.x then
							table.insert(self.objects, k, object)
							break
						elseif x == v.x then
							table.insert(self.objects, k + 1, object)
							break
						elseif x > v.x and k == #self.objects then
							table.insert(self.objects, object)
							break
						end
					elseif y > v.y and k == #self.objects then
						table.insert(self.objects, object)
						break
					end
				end
			else
				table.insert(self.objects, object)
			end
		end,
		["remove"] = function(self, objectID)
			self[objectID] = nil
		end
	}
	
	return tFrame
end

--UI objects

function newLabel(labelID, w)
	local tLabel = {
		["name"] = labelID,
		["type"] = "object",
		["object_type"] = "label",
		["width"] = w,
		["text"] = "",
		["text_align"] = "left",
		["text_colour"] = tColourScheme.screen_text,
		["background_colour"] = nil,
		["setText"] = function(self, sText)
			if type(sText) == "string" then
				self.text = sText
			end
		end,
		["setTextAlign"] = function(self, sAlign)
			if sAlign == "left" or sAlign == "center" or sAlign == "right" then
				self.text_align = sAlign
			end
		end,
		["setTextColour"] = function(self, c)
			if type(c) == "number" then
				self.text_colour = c
			elseif colours[c] then
				self.text_colour = colours[c]
			end
		end,
		["setBackgroundColour"] = function(self, c)
			if type(c) == "number" then
				self.background_colour = c
			elseif colours[c] then
				self.background_colour = colours[c]
			end
		end,
		["redraw"] = function(self)
			if self.background_colour then	term.setBackgroundColour(self.background_colour) end
			term.setTextColour(self.text_colour)
			fastWrite(string.rep(" ", self.width), self.x, self.y)
			
			local x, y = self.x, self.y
			if self.text_align == "center" then
				x = self.x + math.ceil((self.width / 2) - (#self.text / 2))
			elseif self.text_align == "right" then
				x = (self.x + self.width) - #self.text
			end
			fastWrite(string.sub(self.text, 1, self.width), x, y)
		end
	}
	
	return tLabel
end

function newButton(buttonID, w)
	local tButton = {
		["name"] = buttonID,
		["type"] = "object",
		["object_type"] = "button",
		["width"] = w,
		["text"] = "",
		["text_colour"] = tColourScheme.screen_text,
		["focus_text_colour"] = tColourScheme.screen_text_inverse,
		["background_colour"] = nil,
		["focus_background_colour"] = tColourScheme.screen_inverse,
		["has_focus"] = false,
		["is_enabled"] = true,
		["action_listener"] = function(self) end,
		["setText"] = function(self, sText)
			if type(sText) == "string" then
				self.text = sText
			end
		end,
		["setTextColour"] = function(self, c)
			if type(c) == "number" then
				self.text_colour = c
			elseif colours[c] then
				self.text_colour = colours[c]
			end
		end,
		["setFocusTextColour"] = function(self, c)
			if type(c) == "number" then
				self.focus_text_colour = c
			elseif colours[c] then
				self.focus_text_colour = colours[c]
			end
		end,
		["setBackgroundColour"] = function(self, c)
			if type(c) == "number" then
				self.background_colour = c
			elseif colours[c] then
				self.background_colour = colours[c]
			end
		end,
		["setFocusBackgroundColour"] = function(self, c)
			if type(c) == "number" then
				self.focus_background_colour = c
			elseif colours[c] then
				self.focus_background_colour = colours[c]
			end
		end,
		["setEnabled"] = function(self, b)
			if type(b) == "boolean" then
				self.is_enabled = b
			end
		end,
		["setFocused"] = function(self, b)
			if type(b) == "boolean" then
				self.has_focus = b
			end
		end,
		["setActionListener"] = function(self, f)
			if type(f) == "function" then
				self.action_listener = f
			end
		end,
		["isEnabled"] = function(self)
			return self.is_enabled
		end,
		["hasFocus"] = function(self)
			return self.has_focus
		end,
		["redraw"] = function(self)
			if self:hasFocus() then
				term.setBackgroundColour(self.focus_background_colour)
				term.setTextColour(self.focus_text_colour)
			else
				if self.background_colour then	term.setBackgroundColour(self.background_colour) end
				term.setTextColour(self.text_colour)
			end
			fastWrite(string.rep(" ", self.width), self.x, self.y)
			
			local x, y = self.x, self.y
			x = self.x + math.ceil((self.width / 2) - (#self.text / 2))
			fastWrite(string.sub(self.text, 1, self.width), x, y)
		end
	}
	
	return tButton
end