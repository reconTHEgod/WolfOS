--1.4.0_b6
--Sync API for WolfOS
--[[
Copyright © 2012 Esteban Hermida a.k.a MysticT

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

-The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-Visible credit is given to the original author.
-The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

local nWidth, nHeight = 0, 0
local nCursorX, nCursorY = 1, 1
local bBlink = false

local function resize()
	local w, h
	for target,_ in pairs(tTargets) do
		local _w, _h = target.getSize()
		if bMax then
			if (w == nil or h == nil) or (_w * _h) > (w * h) then
				w, h = _w, _h
			end
		else
			if (w == nil or h == nil) or (_w * _h) < (w * h) then
				w, h = _w, _h
			end
		end
	end
	if w and h then
		nWidth = w
		nHeight = h
	end
end

local function call(func, ...)
	for target,_ in pairs(tTargets) do
		target[func](...)
	end
end

-- Sync Functions

function tApi.getSize()
	return nWidth, nHeight
end

function tApi.getCursorPos()
	return nCursorX, nCursorY
end

function tApi.setCursorPos(x, y)
	nCursorX, nCursorY = x, y
	call("setCursorPos", x, y)
end

function tApi.setCursorBlink(b)
	bBlink = b
	call("setCursorBlink", b)
end

function tApi.clear()
	call("clear")
end

function tApi.clearLine()
	call("clearLine")
end

function tApi.write(text)
	call("write", text)
	nCursorX = nCursorX + #text
end

function tApi.scroll(n)
	call("scroll", n)
end

-- API Functions

function addTarget(target)
	tTargets[target] = true
	resize()
	target.setCursorPos(nCursorX, nCursorY)
	target.setCursorBlink(bBlink)
end

function removeTarget(target)
	tTargets[target] = nil
end

function addMonitor(sSide)
	if tMonitors[sSide] then
		return true
	end
	if peripheral.isPresent(sSide) and peripheral.getType(sSide) == "monitor" then
		local mon = peripheral.wrap(sSide)
		tMonitors[sSide] = mon
		addTarget(mon)
		return true
	end
	return false
end

function removeMonitor(sSide)
	if tMonitors[sSide] then
		removeTarget(tMonitors[sSide])
		tMonitors[sSide] = nil
	end
end

function addMonitors()
	for _,s in ipairs(rs.getSides()) do
		addMonitor(s)
	end
end

function removeMonitors()
	for _,s in ipairs(rs.getSides()) do
		removeMonitor(s)
	end
end

function useMaxSize(b)
	bMax = b
end

function redirect(bAddTerm)
	if bAddTerm then
		addTarget(term.native or term)
	end
	term.redirect(tApi)
end

function restore()
	term.restore()
end