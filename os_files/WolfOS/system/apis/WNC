--1.4.0_b6
--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

--WolfOS Network Communication (HyperPaw)

local function encryptData(nReceiverID, sMessage)
	local sSenderID = string.rep("0", 3 - string.len(tostring(os.getComputerID()))) .. os.getComputerID()
	local sReceiverID = "---"
	if nReceiverID then
		sReceiverID = string.rep("0", 3 - string.len(tostring(nReceiverID))) .. nReceiverID
	end
	local sRouteHeader = sSenderID .. "." .. sReceiverID
	return sRouteHeader .. " " .. encryption.toBase64(sMessage)
end

local function decryptData(sData)
	local sRouteHeader = string.sub(sData, 1, 7)
	local nSenderID = tonumber(string.sub(sRouteHeader, 1, 3))
	local nReceiverID = tonumber(string.sub(sRouteHeader, 5, 7)) or nil
	return nSenderID, nReceiverID, encryption.fromBase64(string.sub(sData, 9))
end

function send(nReceiverID, sEvent, p1, p2, p3, p4, p5) -- connection_request, connection_response, connection_success, connection_failure, data_request, data_push, data_success, data_failure, discovery_request, discovery_response, discovery_success, discovery_failure,
	rednet.send(nReceiverID, encryptData(nReceiverID, textutils.serialize({sEvent, p1, p2, p3, p4, p5})))
end

function broadcast(sEvent, p1, p2, p3, p4, p5)
	rednet.broadcast(encryptData(nil, textutils.serialize({sEvent, p1, p2, p3, p4, p5})))
end

function receive(senderFilter, nTimeout, bExclude) -- bExclude: true = exclude Sender IDs, false = include Sender IDs
	local timer = nil
	if type(senderFilter) == "number" then senderFilter = {senderFilter} end
	if nTimeout then timer = os.startTimer(nTimeout) end
	while true do
		local _event, p1, p2, nDistance = os.pullEvent()
		if _event == "rednet_message" then
			local nSenderID, nReceiverID, sMessage = decryptData(p2)
			if nReceiverID == os.getComputerID() or not nReceiverID then
				if not senderFilter or (bExclude == true and not WDM.matchFromTable(nSenderID, senderFilter)) or (not bExclude and WDM.matchFromTable(nSenderID, senderFilter)) then
					local sEvent, p1, p2, p3, p4, p5 = unpack(textutils.unserialize(sMessage))
					return nSenderID, nDistance, sEvent, p1, p2, p3, p4, p5
				end
			end
		elseif _event == "timer" and p1 == timer then
			return nil, nil, "connection_failure", "timeout"
		end
	end
end