--1.4.0_b6
--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

local getSide = function(sTitle)
	while true do
		local tChoices = {}
		for _, sSide in ipairs(WPH.getValidSides()) do
			if WPH.getType(sSide) == "drive" and disk.hasData(sSide) then
				local sSide = string.upper(string.sub(sSide, 1, 1)) .. string.sub(sSide, 2)
				table.insert(tChoices, {["display"] = sSide, ["id"] = string.lower(sSide), ["selectable"] = true})
			end
		end
		local sSelection = WUI.menu(tChoices, sTitle, "Disk Manager", true, {["disk"] = WPH.getValidSides(), ["disk_eject"] = WPH.getValidSides()})
		if sSelection == "return" then
			break
		elseif sSelection ~= "disk" and sSelection ~= "disk_eject" then
			return sSelection
		end
	end
	return nil
end

local bMenuLoop = true
while bMenuLoop == true do
	local sSide = getSide("Select drive:")
	if sSide then
		while true do
			local tEncrypt = {["display"] = "Encrypt Disk", ["id"] = "encrypt_disk", ["selectable"] = true}
			if WDM.isDiskEncrypted(sSide) then tEncrypt = {["display"] = "Decrypt Disk", ["id"] = "decrypt_disk", ["selectable"] = true} end
			local tChoices = {
				{["display"] = "Drive: " .. string.upper(string.sub(sSide, 1, 1)) .. string.sub(sSide, 2), ["id"] = "side", ["selectable"] = false},
				{["display"] = "Disk ID#: " .. disk.getDiskID(sSide), ["id"] = "disk_id", ["selectable"] = false},
				{["display"] = "Disk Space: " .. WDM.scaleBytes(fs.getFreeSpace(disk.getMountPath(sSide))), ["id"] = "disk_space", ["selectable"] = false},
				{["display"] = "Disk Label: " .. (disk.getLabel(sSide) or ""), ["id"] = "disk_label", ["selectable"] = false},
				{["display"] = "", ["selectable"] = false},
				{["display"] = "Set Label", ["id"] = "set_label", ["selectable"] = true},
				{["display"] = "Clone Disk", ["id"] = "clone_disk", ["selectable"] = true},
				{["display"] = "Format Disk", ["id"] = "format_disk", ["selectable"] = true},
				tEncrypt
			}
			local tActions = {
				["set_label"] = function()
					WUI.clear("Disk Manager")
					WUI.slowPrint("Enter new disk label: \n")
					WUI.registerTextField(nil, ".")
					local t = WUI.getText(true)
					if t then
						local sNewLabel = t[1]
						disk.setLabel(sSide, sNewLabel)
						WUI.clear("Disk Manager")
						if sNewLabel == "" then
							WUI.slowPrint("Label removed from disk.", nil, nil, true)
						else
							WUI.slowPrint("Label on disk set to '" .. sNewLabel .. "'.", nil, nil, true)
						end
					end
				end,
				["clone_disk"] = function()
					local sDestSide = nil
					repeat
						sDestSide = getSide("Select destination drive:")
					until sDestSide ~= sSide
					if sDestSide then
						local sSourceMountPath = disk.getMountPath(sSide)
						local sDestMountPath = disk.getMountPath(sDestSide)
						local t = fs.list(sDestMountPath)
						for n = 1, #t do
							fs.delete(sDestMountPath .. "/" .. t[n])
						end
						t = fs.list(sSourceMountPath)
						for n = 1, #t do
							fs.copy(sSourceMountPath .. "/" .. t[n], sDestMountPath .. "/" .. t[n])
						end
						local sLabel = disk.getLabel(sSide) or ""
						disk.setLabel(sDestSide, sLabel)
						WUI.clear("Disk Manager")
						WUI.slowPrint("Data on disk cloned to disk in " .. sDestSide .. " drive.", nil, nil, true)
					end
				end,
				["format_disk"] = function()
					WUI.clear("Disk Manager")
					if WUI.choiceMenu("Format disk?") then
						local delete = function() fs.delete(WDM.sIteratorDir() .. WDM.sIteratorItem()) end
						WDM.iterateThroughDir(disk.getMountPath(sSide) .. "/", delete, delete)
						disk.setLabel(sSide, "")
						WUI.clear("Disk Manager")
						WUI.slowPrint("Disk formatted.", nil, nil, true)
					end
				end,
				["encrypt_disk"] = function()
					WUI.clear("Disk Manager")
					while true do
						WUI.slowPrint("Enter new encryption key: \n")
						WUI.registerTextField(nil, "%w", 16, true)
						local t = WUI.getText(true)
						WUI.clear("Disk Manager")
						if t then
							local sNewKey = t[1]
							if #sNewKey < 8 then
								WUI.slowPrint("Encryption keys must be between 8 and 16 characters! \n")
							else
								WDM.encryptDir(disk.getMountPath(sSide) .. "/", sNewKey)
								WDM.fWrite(disk.getMountPath(sSide) .. "/.encrypt", encryption.encrypt(sNewKey, sNewKey))
								WUI.clear("Disk Manager")
								WUI.slowPrint("Disk encrypted.", nil, nil, true)
								break
							end
						else
							break
						end
					end
				end,
				["decrypt_disk"] = function()
					WUI.clear("Disk Manager")
					local bSuccess, sKey = WUI.correctKey("Disk Manager", disk.getMountPath(sSide) .. "/.encrypt", true)
					if bSuccess then
						WDM.decryptDir(disk.getMountPath(sSide) .. "/", sKey)
						fs.delete(disk.getMountPath(sSide) .. "/.encrypt")
						WUI.clear("Disk Manager")
						WUI.slowPrint("Disk decrypted.", nil, nil, true)
					end
				end,
			}
			local sSelection = WUI.menu(tChoices, "Disk Manager", "Disk Manager", true, {["disk_eject"] = sSide})
			if sSelection == "return" or sSelection == "disk_eject" then
				break
			else
				tActions[sSelection]()
			end
		end
	else
		bMenuLoop = false os.run({}, WDM.getSystemDir("system") .. "utilityMenu")
	end
end