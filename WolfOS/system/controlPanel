--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

local editUser = function(sUser)
	while true do
		local tUser = {}
		if not WDM.readSystemData("offline") and not WDM.readServerData("server_state") then
			WNC.send(WDM.readSystemData("server_id"), "data_request", "user_data", sUser, WDM.readSystemTemp("current_uid"))
			local nSenderID, _, sEvent, p1 = WNC.receive(WDM.readSystemData("server_id"), 10)
			if type(p1) == "table" then
				tUser = p1
			else
				WUI.clear("Control Panel")
				WUI.slowPrint("Could not retrieve data: \n")
				WUI.slowPrint("> " .. sEvent .. ": " .. p1 .. "\n")
				WUI.slowPrint("Press any key to continue...")
				os.pullEvent("key") 
				break
			end
		else
			tUser = WAU.exists(sUser)
		end
		if tUser then
			tChoices = {"\\Unique ID: " .. tUser.uid, "\\User Account ID: " .. tUser.name, "\\User Account Type: " .. string.upper(string.sub(tUser.type, 1, 1)) .. string.sub(tUser.type, 2), "\\", "Change User Account ID", "Change Passcode", "Change User Account Type", "Delete User Account"}
			tActions = {
				["Change User Account ID"] = function()
					WUI.clear("Control Panel")
					if WUI.correctPass("Control Panel", true) then
						WUI.clear("Control Panel")
						local sNewUser
						while true do
							WUI.slowPrint("Please enter new User Account ID: \n")
							WUI.registerTextField(nil, "[%w%.%-_]", 16, false)
							local t = WUI.getText(true)
							WUI.clear("Control Panel")
							if t then
								sNewUser = t[1]
								if #sNewUser < 1 then
									WUI.slowPrint("User Account IDs must be between 1 and 16 characters! \n")
								elseif WAU.exists(nil, sNewUser) then
									WUI.slowPrint("User Account ID already in use! \n")
								else
									WAU.changeUserData(tUser.uid, "user", sNewUser)
									WUI.clear("Control Panel")
									WUI.slowPrint("User Account ID changed successfully!", nil, nil, true)
									break
								end
							else
								break
							end
						end
					end
				end,
				["Change Passcode"] = function()
					WUI.clear("Control Panel")
					if WUI.correctPass("Control Panel", true) then
						WUI.clear("Control Panel")
						local sNewPass
						while true do
							WUI.slowPrint("Please enter new Passcode: \n")
							WUI.registerTextField(nil, "%w", 16, true)
							local t = WUI.getText(true)
							WUI.clear("Control Panel")
							if t then
								sNewPass = t[1]
								if #sNewPass < 8 then
									WUI.slowPrint("Passcodes must be between 8 and 16 characters! \n")
								else
									WAU.changeUserData(tUser.uid, "pass", hash.sha256(sNewPass))
									WUI.clear("Control Panel")
									WUI.slowPrint("Passcode changed successfully!", nil, nil, true)
									break
								end
							else
								break
							end
						end
					end
				end,
				["Change User Account Type"] = function()
					WUI.clear("Control Panel")
					if WUI.correctPass("Control Panel", true) then
						WUI.clear("Control Panel")
						tChoices = {"Admin", "User"}
						local sNewType = WUI.menu(tChoices, "User Account Type:", "Control Panel", true)
						WAU.changeUserData(tUser.uid, "type", string.lower(sNewType))
						WUI.clear("Control Panel")
						WUI.slowPrint("User Account type changed successfully!", nil, nil, true)
					end
				end,
				["Delete User Account"] = function()
					WUI.clear("Control Panel")
					if WUI.correctPass("Control Panel", true) then
						WUI.clear("Control Panel")
						if WUI.choiceMenu("Delete User Account?") then
							WAU.removeUser(tUser.uid)
							WUI.clear("Control Panel")
							WUI.slowPrint("User Account deleted successfully!", nil, nil, true)
						end
					end
				end,
			}
			local sSelection = WUI.menu(tChoices, "User Account Settings:", "Control Panel", true)
			if sSelection == "Return" then
				break
			else
				tActions[sSelection]()
			end
		else
			break
		end
	end
end

local getSide = function(sFilter)
	local tChoices = {}
	for _, sSide in ipairs(WPH.getValidSides()) do
		if WPH.getType(sSide) == sFilter then
			local sSide = string.upper(string.sub(sSide, 1, 1)) .. string.sub(sSide, 2)
			table.insert(tChoices, sSide)
		end
	end
	local sSelection = WUI.menu(tChoices, "Select port:", "Control Panel", true)
	if sSelection ~= "Return" then
		return string.lower(sSelection)
	end
	return nil
end

local tChoices = {}
local tActions = {}
local bMenuLoop = true
local nMenuNum = 1
repeat
	if nMenuNum == 1 then
		tChoices = {"System Information", "\\", "User Account Settings", "System Settings"}
		tActions = {
			["System Information"] = function()
				local sMonitorPort = WDM.readSystemData("monitor_port") or ""
				local sModemPort = WDM.readSystemData("modem_port") or ""
				local sServerID = WDM.readSystemData("server_id") or ""
				local sRelayID = WDM.readSystemData("relay_id") or ""
				if WDM.readSystemData("offline") then sServerID = "OFFLINE" sRelayID = "OFFLINE"
				elseif WDM.readServerData("server_state") then sServerID = "N/A" end
				local sSelection = nil
				repeat
					tChoices = {
						"\\WolfOS Version: " .. WDM.readSystemData("version"),
						"\\",
						"\\Hard Drive Space: " .. WDM.scaleBytes(fs.getFreeSpace("/")),
						"\\Computer ID#: " .. os.getComputerID(),
						"\\Monitor Port: " .. string.upper(string.sub(sMonitorPort, 1, 1)) .. string.sub(sMonitorPort, 2),
						"\\Modem Port: " .. string.upper(string.sub(sModemPort, 1, 1)) .. string.sub(sModemPort, 2),
						"\\",
						"\\Server ID#: " .. sServerID,
						"\\Relay ID#: " .. sRelayID,
						"\\",
						"\\WolfOS created by 'toxicwolf'",
						"\\<toxic.wolf@hotmail.co.uk>"
					}
					sSelection = WUI.menu(tChoices, "System Information:", "Control Panel", true)
				until sSelection == "Return"
			end,
			["User Account Settings"] = function() nMenuNum = 2 end,
			["System Settings"] = function() nMenuNum = 3 end,
			["Return"] = function() bMenuLoop = false os.run({}, WDM.getSystemDir("system") .. "mainMenu") end
		}
		local sSelection = WUI.menu(tChoices, "Control Panel:", "Control Panel", true)
		tActions[sSelection]()
	elseif nMenuNum == 2 then
		tChoices = {"~Change User Account ID", "~Change Passcode", "@Edit User Account", "@Create User Account"}
		tActions = {
			["Change User Account ID"] = function()
				WUI.clear("Control Panel")
				if WUI.correctPass("Control Panel", true) then
					WUI.clear("Control Panel")
					local sNewUser
					while true do
						WUI.slowPrint("Please enter new User Account ID: \n")
						WUI.registerTextField(nil, "[%w%.%-_]", 16, false)
						local t = WUI.getText(true)
						WUI.clear("Control Panel")
						if t then
							sNewUser = t[1]
							if #sNewUser < 1 then
								WUI.slowPrint("User Account IDs must be between 1 and 16 characters! \n")
							elseif WAU.exists(nil, sNewUser) then
								WUI.slowPrint("User Account ID already in use! \n")
							else
								WAU.changeUserData(WDM.readSystemTemp("current_uid"), "user", sNewUser)
								WDM.writeSystemTemp(sNewUser, "current_user")
								WUI.clear("Control Panel")
								WUI.slowPrint("User Account ID changed successfully!", nil, nil, true)
								break
							end
						else
							break
						end
					end
				end
			end,
			["Change Passcode"] = function()
				WUI.clear("Control Panel")
				if WUI.correctPass("Control Panel", true) then
					WUI.clear("Control Panel")
					local sNewPass
					while true do
						WUI.slowPrint("Please enter new Passcode: \n")
						WUI.registerTextField(nil, "%w", 16, true)
						local t = WUI.getText(true)
						WUI.clear("Control Panel")
						if t then
							sNewPass = t[1]
							if #sNewPass < 8 then
								WUI.slowPrint("Passcodes must be between 8 and 16 characters! \n")
							else
								WAU.changeUserData(WDM.readSystemTemp("current_uid"), "pass", hash.sha256(sNewPass))
								WDM.writeSystemTemp(hash.sha256(sNewPass), "current_hash")
								WUI.clear("Control Panel")
								WUI.slowPrint("Passcode changed successfully!", nil, nil, true)
								break
							end
						else
							break
						end
					end
				end
			end,
			["Edit User Account"] = function()
				while true do
					tChoices = {}
					local tAll = {}
					if not WDM.readSystemData("offline") and not WDM.readServerData("server_state") then
						WNC.send(WDM.readSystemData("server_id"), "data_request", "user_list", WDM.readSystemTemp("current_uid"))
						local nSenderID, _, sEvent, p1 = WNC.receive(WDM.readSystemData("server_id"), 10)
						if sEvent == "connection_failure" then
							WUI.clear("Startup Menu")
							WUI.slowPrint("Could not retrieve data: \n")
							WUI.slowPrint("> " .. sEvent .. ": " .. p1 .. "\n")
							WUI.slowPrint("Press any key to continue...")
							os.pullEvent("key") 
							break
						else
							tAll = p1
						end
					else
						tAll = textutils.unserialize(encryption.fromBase64(WDM.readAllText(WDM.getSystemDir("system_data") .. "users.dat")))
					end
					if #tAll > 0 then
						local tAdmins, tUsers = {}, {}
						for nUser, tUser in ipairs(tAll) do
							if tUser.type == "admin" then
								tAdmins[#tAdmins + 1] = tUser.name
							else
								tUsers[#tUsers + 1] = tUser.name
							end
						end
						for n = 1, #tAdmins do
							table.insert(tChoices, tAdmins[n])
						end
						if #tAdmins > 0 and #tUsers > 0 then table.insert(tChoices, "\\") end
						for n = 1, #tUsers do
							table.insert(tChoices, tUsers[n])
						end
						local sSelection = WUI.menu(tChoices, "User Accounts:", "Control Panel", true)
						if sSelection == "Return" then 
							break
						else
							editUser(sSelection)
						end
					else
						break
					end
				end
			end,
			["Create User Account"] = function()
				local sNewUser, sNewPass
				WUI.clear("Control Panel")
				while true do
					WUI.slowPrint("Please enter new User Account ID: \n")
					WUI.registerTextField(nil, "[%w%.%-_]", 16, false)
					WUI.slowPrint("\n \n Please enter new Passcode: \n")
					WUI.registerTextField(nil, "%w", 16, true)
					local t = WUI.getText(true)
					WUI.clear("Control Panel")
					if t then
						sNewUser, sNewPass = t[1], t[2]
						if #sNewUser > 0 and not WAU.exists(nil, sNewUser) and #sNewPass > 7 then
							WAU.createUser(sNewUser, hash.sha256(sNewPass))
							WUI.clear("Control Panel")
							WUI.slowPrint("User Account created successfully!", nil, nil, true)
							break
						else
							if #sNewUser < 1 then
								WUI.slowPrint("User Account IDs must be between 1 and 16 characters!")
							elseif WAU.exists(nil, sNewUser) then
								WUI.slowPrint("User Account ID already in use!")
							end
							if #sNewPass < 8 then
								WUI.slowPrint("Passcodes must be between 8 and 16 characters!")
							end
							WUI.slowPrint("")
						end
					else
						break
					end
				end
			end,
			["Return"] = function() nMenuNum = 1 end
		}
		local sSelection = WUI.menu(tChoices, "User Account Settings:", "Control Panel", true)
		tActions[sSelection]()
	elseif nMenuNum == 3 then
		tChoices = {"Modem Settings", "Monitor Settings", "\\", "Network Settings", "@\\", "@Update WolfOS", "@Uninstall WolfOS"}
		tActions = {
			["Modem Settings"] = function() nMenuNum = 4 end,
			["Monitor Settings"] = function() nMenuNum = 5 end,
			["Network Settings"] = function() nMenuNum = 6 end,
			["Update WolfOS"] = function()
				local sUrl = "http://pastebin.com/raw.php?i=20pSe6n3"
				local sLatestVersion = nil
				WUI.clear("Control Panel")
				if http then
					WUI.slowPrint("Checking for updates...", nil, nil, true)
					http.request(sUrl)
					while true do
						local sEvent, _, hSource = os.pullEvent()
						if sEvent == "http_success" then
							sLatestVersion = hSource.readAll()
							break
						elseif sEvent == "http_failure" then
							break
						end
					end
					WUI.clear("Control Panel")
					if sLatestVersion then
						local convertVersion = function(sVersion)
							local tParts = WDM.seperateString(string.sub(sVersion, 1, 5), "%.")
							return tonumber(tParts[1] .. "." .. tParts[2] .. tParts[3])
						end
						if convertVersion(sLatestVersion) > convertVersion(WDM.readSystemData("version")) then
							WUI.slowPrint("WolfOS is outdated!", nil, nil, true)
						else
							WUI.slowPrint("WolfOS is up to date!", nil, nil, true)
						end
					else
						WUI.slowPrint("Request timed out!", nil, nil, true)
					end
				else
					WUI.slowPrint("Please enable the 'http' setting in the ComputerCraft config.", nil, nil, true)
				end
			end,
			["Uninstall WolfOS"] = function()
				WUI.clear("Control Panel")
				if WUI.correctPass("Control Panel", true) then
					WUI.clear("Control Panel")
					if WUI.choiceMenu("Uninstall WolfOS?") then
						WUI.clear("Control Panel")
						WUI.slowPrint("Uninstalling WolfOS...", nil, nil, true)
						fs.delete("/WolfOS")
						fs.delete("/boot/WolfOS")
						term.clear()
						WUI.slowPrint("WolfOS uninstalled successfully!", 1, 1, true)
						os.reboot()
					end
				end
			end,
			["Return"] = function() nMenuNum = 1 end
		}
		local sSelection = WUI.menu(tChoices, "System Settings", "Control Panel", true)
		tActions[sSelection]()
	elseif nMenuNum == 4 then
		local sModem = "Turn modem on"
		if WDM.readSystemData("modem_state") == "true" then sModem = "Turn modem off" end
		tChoices = {"@Change modem port", "@\\", sModem}
		tActions = {
			["Change modem port"] = function()
				local sPort = getSide("modem")
				if sPort then
					WDM.writeSystemData(sPort, "modem_port")
					WUI.clear("Control Panel")
					WUI.slowPrint("Modem connected at " .. sPort .. " port.", nil, nil, true)
				end
			end,
			[sModem] = function()
				local sPort = WDM.readSystemData("modem_port")
				if sPort and WPH.getType(sPort) == "modem" then
					if rednet.isOpen(sPort) then
						rednet.close(sPort)
						WDM.writeSystemData("false", "modem_state")
						WUI.clear("Control Panel")
						WUI.slowPrint("Modem turned off at " .. sPort .. " port.", nil, nil, true)
					else
						rednet.open(sPort)
						WDM.writeSystemData("true", "modem_state")
						WUI.clear("Control Panel")
						WUI.slowPrint("Modem turned on at " .. sPort .. " port.", nil, nil, true)
					end
				else
					tActions["Change modem port"]()
				end
			end,
			["Return"] = function() nMenuNum = 3 end
		}
		local sSelection = WUI.menu(tChoices, "Modem Settings", "Control Panel", true)
		tActions[sSelection]()
	elseif nMenuNum == 5 then
		local sMonitor = "Synchronize with monitor"
		if WDM.readSystemData("monitor_state") == "true" then sMonitor = "Reset monitor output" end
		tChoices = {"@Change monitor port", "@\\", sMonitor}
		tActions = {
			["Change monitor port"] = function()
				local sPort = getSide("monitor")
				if sPort then
					WDM.writeSystemData(sPort, "monitor_port")
					WUI.clear("Control Panel")
					WUI.slowPrint("Monitor port connected at " .. sPort .. " port.", nil, nil, true)
				end
			end,
			["Synchronize with monitor"] = function()
				local sPort = WDM.readSystemData("monitor_port")
				if sPort and WPH.getType(sPort) == "monitor" then
					term.syncScreens(true)
					term.redirect(peripheral.wrap(sPort))
					WDM.writeSystemData("true", "monitor_state")
					WUI.clear("Control Panel")
					WUI.slowPrint("Synchronized with monitor at " .. sPort .. " port.", nil, nil, true)
				else
					tActions["Change monitor port"]()
				end
			end,
			["Reset monitor output"] = function()
				term.clear()
				term.setCursorPos(1, 1)
				term.restore()
				term.syncScreens(false)
				WDM.writeSystemData("false", "monitor_state")
				WUI.clear("Control Panel")
				WUI.slowPrint("Monitor output reset.", nil, nil, true)
			end,
			["Return"] = function() nMenuNum = 3 end
		}
		local sSelection = WUI.menu(tChoices, "Monitor Settings", "Control Panel", true)
		tActions[sSelection]()
	elseif nMenuNum == 6 then
		local bOffline = WDM.readSystemData("offline")
		local sOffline = "Turn off offline mode"
		if not bOffline then sOffline = "Turn on offline mode" end
		tChoices = {"@" .. sOffline}
		if not bOffline then
			tChoices[#tChoices + 1] = "@\\"
			if WDM.readServerData("server_state") then
				tChoices = WDM.mergeTables(tChoices, {"@Server Settings", "@\\"})
			else
				tChoices = WDM.mergeTables(tChoices, {"@Start Server", "@\\", "@Connect to Server"})
			end
			tChoices = WDM.mergeTables(tChoices, {"@Connect to Relay", "Test Connections", "@\\", "@Network Monitor"})
		end
		tActions = {
			[sOffline] = function()
				if bOffline then
					WDM.writeSystemData(false, "offline")
					WUI.clear("Control Panel")
					WUI.slowPrint("Offline mode turned off.", nil, nil, true)
				else
					WDM.writeSystemData(true, "offline")
					WUI.clear("Control Panel")
					WUI.slowPrint("Offline mode turned on.", nil, nil, true)
				end
			end,
			["Server Settings"] = function() nMenuNum = 7 end,
			["Start Server"] = function()
				WUI.clear("Control Panel")
				WUI.slowPrint("Starting Server...", nil, nil, true)
				WDM.writeServerData(true, "server_state")
				if not WDM.readSystemTemp("local_user") then WUI.logout() end
			end,
			["Connect to Server"] = function()
				tChoices = {"Enter Server ID#"}
				local tServers = WNC.discover("server", 5)
				if #tServers > 0 then
					tChoices[#tChoices + 1] = "\\"
					for k, v in pairs(tServers) do
						tChoices[#tChoices + 1] = "ID#: " .. k .. ", Distance: " .. v
					end
				end
				local sSelection = WUI.menu(tChoices, "Server Selection", "Control Panel", true)
				WUI.clear("Control Panel")
				if sSelection == "Enter Server ID#" then
					WUI.slowPrint("Enter Server ID#: \n")
					WUI.registerTextField(nil, "%d")
					local t = WUI.getText()
					if t then
						WUI.clear("Control Panel")
						WUI.slowPrint("Connecting to Server...", nil, nil, true)
						WNC.send(t[1], "connection_request", "client_connection")
						local nSenderID, _, sEvent, p1 = WNC.receive(t[1], 5)
						WUI.clear("Control Panel")
						if sEvent == "connection_success" then
							WDM.writeSystemData(t[1], "server_id")
							WUI.slowPrint("Connected to Server. Log out to apply changes.", nil, nil, true)
						elseif sEvent == "connection_failure" then
							WUI.slowPrint("Could not connect to Server: \n")
							WUI.slowPrint("> " .. sEvent .. ": " .. p1 .. "\n")
							WUI.slowPrint("Press any key to continue...")
							os.pullEvent("key") 
						end
					end
				elseif sSelection ~= "Return" then
					local nServerID = string.sub(sSelection, 6, string.find(sSelection, ",") - 1)
					WUI.slowPrint("Connecting to Server...", nil, nil, true)
					WNC.send(nServerID, "connection_request", "client_connection")
					local nSenderID, _, sEvent, p1 = WNC.receive(nServerID, 5)
					WUI.clear("Control Panel")
					if sEvent == "connection_success" then
						WDM.writeSystemData(nServerID, "server_id")
						WUI.slowPrint("Connected to Server. Log out to apply changes.", nil, nil, true)
					elseif sEvent == "connection_failure" then
						WUI.slowPrint("Could not connect to Server: \n")
						WUI.slowPrint("> " .. sEvent .. ": " .. p1 .. "\n")
						WUI.slowPrint("Press any key to continue...")
						os.pullEvent("key") 
					end
				end
			end,
			["Connect to Relay"] = function()
			
			end,
			["Test Connections"] = function()
				WUI.clear("Control Panel")
				WUI.slowPrint("Testing Connections... \n", nil, nil, true)
				WUI.clear("Control Panel")
				local nServerID = WDM.readSystemData("server_id")
				if nServerID then
					WNC.send(nServerID, "connection_request", "test_connection")
					local nSenderID, _, sEvent, p1 = WNC.receive(nServerID, 5)
					if sEvent == "connection_response" then
						WUI.slowPrint("Server connection OK.", nil, nil, true)
					else
						WUI.slowPrint("Could not connect to Server: \n")
						WUI.slowPrint("> " .. sEvent .. ": " .. p1 .. "\n")
						WUI.slowPrint("Press any key to continue...")
						os.pullEvent("key") 
					end
				end
			end,
			["Return"] = function() nMenuNum = 3 end
		}
		local sSelection = WUI.menu(tChoices, "Network Settings", "Control Panel", true)
		tActions[sSelection]()
	elseif nMenuNum == 7 then
		tChoices = {"Stop Server", "\\"}
		for k, v in pairs(WDM.readServerTemp()) do
			if v == true then
				local sModule = string.sub(k, 1, string.find(k, "_") - 1)
				if WDM.readServerData(sModule .. "_state") then
					tChoices[#tChoices + 1] = string.upper(string.sub(sModule, 1, 1)) .. string.sub(sModule, 2) .. " Module: ON"
				else
					tChoices[#tChoices + 1] = string.upper(string.sub(sModule, 1, 1)) .. string.sub(sModule, 2) .. " Module: OFF"
				end
			end
		end
		tActions = {
			["Stop Server"] = function()
				WUI.clear("Control Panel")
				WUI.slowPrint("Stopping Server...", nil, nil, true)
				WDM.writeServerData(false, "server_state")
				nMenuNum = 6
			end,
			["Return"] = function() nMenuNum = 6 end
		}
		local sSelection = WUI.menu(tChoices, "Server Settings", "Control Panel", true)
		if tActions[sSelection] then
			tActions[sSelection]()
		else
			local sModule = string.lower(string.sub(sSelection, 1, string.find(sSelection, "%s") - 1))
			if WDM.readServerData(sModule .. "_state") then
				WDM.writeServerData(false, sModule .. "_state")
			else
				WDM.writeServerData(true, sModule .. "_state")
			end
		end
	end
until bMenuLoop == false