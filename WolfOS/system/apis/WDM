--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

--WolfOS Data Management Library

local _root = "/WolfOS/"
local _utils, _progs, _servs, _users, _appdata, _system = _root .. "utilities/", _root .. "programs/", _root .. "servers/", _root .. "users/", _root .. "appdata/", _root .. "system/"
local _data = _system .. "data/"

local tSystemDirs = {["root"] = _root, ["utilities"] = _utils, ["programs"] = _progs, ["servers"] = _servs, ["users"] = _users, ["appdata"] = _appdata, ["system"] = _system, ["data"] = _data}
local tSystemData, tSystemTemp, tServerData = {}, {}, {}
local _sIteratorDir, _sIteratorItem = "", ""

function sIteratorDir()
	return _sIteratorDir
end

function sIteratorItem()
	return _sIteratorItem
end

function exists(sPath)
	local hFile = io.open(sPath, "r")
	if hFile then
		hFile:close()
		return true
	end
	return false
end

function readToTable(sPath)
	if exists(sPath) then
		local hFile = io.open(sPath, "r")
		local tLines = {}
		local sLine = ""
		local i = 1
		repeat
			sLine = hFile:read()
			tLines[i] = sLine
			i = i + 1
		until not sLine
		hFile:close()
		return tLines
	end
	return {}
end

function readLine(sPath, nLine)
	if exists(sPath) then
		local tLines = readToTable(sPath)
		return tLines[nLine]
	end
	return ""
end

function readAllText(sPath)
	if exists(sPath) then
		local hFile = io.open(sPath, "r")
		return hFile:read("*a")
	end
	return ""
end

function fWrite(sPath, sText)
	local hFile = io.open(sPath, "w")
	hFile:write(tostring(sText))
	hFile:close()
end

function fWriteFromTable(sPath, tTable)
	local sText = ""
	for n = 1, #tTable do
		sText = sText .. tTable[n] .. "\n"
	end
	fWrite(sPath, sText)
end

function fWriteAtStart(sPath, sText)
	local _sText = readAllText(sPath)
	fWrite(sPath, sText .. "\n" .. _sText)
end

function fWriteAtStartFromTable(sPath, tTable)
	local sText = ""
	for n = 1, #tTable do
		sText = sText .. tTable[n] .. "\n"
	end
	fWriteAtStart(sPath, sText)
end

function fAppend(sPath, sText)
	local hFile = io.open(sPath, "a")
	hFile:write(sText .. "\n")
	hFile:close()
end

function fAppendFromTable(sPath, tTable)
	local sText = ""
	for n = 1, #tTable do
		sText = sText .. tTable[n] .. "\n"
	end
	fAppend(sPath, sText)
end

function replaceLine(sPath, nLine, sText)
	local tLines = readToTable(sPath)
	tLines[nLine] = sText
	fWriteFromTable(sPath, tLines)
end

function removeLine(sPath, nLine)
	local tLines = readToTable(sPath)
	table.remove(tLines, nLine)
	fWriteFromTable(sPath, tLines)
end

function getFileType(sPath)
	local tExtensions = {[".dat"] = "data", [".txt"] = "text", [".lib"] = "library", [".prj"] = "project"}
	if exists(sPath) and tExtensions[string.sub(sPath, #sPath - 3)] then
		return tExtensions[string.sub(sPath, #sPath - 3)]
	end
	return nil
end

function getSystemDir(sIndex)
	return tSystemDirs[sIndex]
end

function readSystemTemp(sIndex) -- current_uid, current_user, current_hash, current_type,
	return tSystemTemp[sIndex]
end

function readSystemData(sIndex) -- version, modem_port, modem_state, monitor_port, monitor_state, offline, mainframe_id, relay_id,
	if #tSystemData == 0 then tSystemData = textutils.unserialize(encryption.fromBase64(readAllText(tSystemDirs.data .. "system.dat"))) end
	return tSystemData[sIndex]
end

function readServerData(sIndex) -- mainframe_state, user_server, user_state, data_server, data_state, email_server, email_state, im_server, im_state, ...
	if #tServerData == 0 then tServerData = textutils.unserialize(encryption.fromBase64(readAllText(tSystemDirs.data .. "server.dat"))) end
	return tServerData[sIndex]
end

function writeSystemTemp(sString, sIndex)
	tSystemTemp[sIndex] = sString
end

function writeSystemData(sString, sIndex)
	if #tSystemData == 0 then tSystemData = textutils.unserialize(encryption.fromBase64(readAllText(tSystemDirs.data .. "system.dat"))) end
	tSystemData[sIndex] = sString
	fWrite(tSystemDirs.data .. "system.dat", encryption.toBase64(textutils.serialize(tSystemData)))
end

function writeServerData(sString, sIndex)
	if #tServerData == 0 then tServerData = textutils.unserialize(encryption.fromBase64(readAllText(tSystemDirs.data .. "server.dat"))) end
	tServerData[sIndex] = sString
	fWrite(tSystemDirs.data .. "server.dat", encryption.toBase64(textutils.serialize(tServerData)))
end

function list(sDir)
	local tAll = fs.list(sDir)
	local tFiles = {}
	local tDirs = {}
	for n, sItem in pairs(tAll) do
		if string.sub(sItem, 1, 1) ~= "." then
			local sPath = fs.combine(sDir, sItem)
			if fs.isDir(sPath) then
				table.insert(tDirs, sItem)
			else
				table.insert(tFiles, sItem)
			end
		end
	end
	table.sort(tDirs)
	table.sort(tFiles)
	return tDirs, tFiles
end

function matchFromTable(sString, tTable, nStartPos, bPartial)
	local nStartPos = nStartPos or 1
	local bPartial = bPartial or false
	for n = nStartPos, #tTable do
		local nStart, nEnd = string.find(tTable[n], sString)
		if nStart == 1 and nEnd == #tTable[n] or bPartial == true and nStart then
			return true, n
		end
	end
	return false, nil
end

function seperateString(sString, sSeperator, bInclusive)
	if string.find(string.sub(sSeperator, 1, 1), "[%^%%]") then sSeperator = string.sub(sSeperator, 1, 2)
	elseif string.sub(sSeperator, 1, 1) == "[" then sSeperator = sSeperator
	else sSeperator = string.sub(sSeperator, 1, 1) end
	bInclusive = bInclusive or false
	local tTable = {}
	local nLastSeperator = 0
	local nNextSeperator = 0
	for nChar = 1, #sString do
		local sChar = string.sub(sString, nChar, nChar)
		if string.find(sChar, sSeperator) then
			nNextSeperator = nChar
			table.insert(tTable, string.sub(sString, nLastSeperator + 1, nNextSeperator - 1))
			if bInclusive then table.insert(tTable, sChar) end
			nLastSeperator = nNextSeperator
		end
	end
	if nLastSeperator < #sString then table.insert(tTable, string.sub(sString, nLastSeperator + 1)) end
	repeat
		local _, i = matchFromTable("", tTable)
		if i then
			table.remove(tTable, i)
		end
	until not i
	return tTable
end

function camelCase(sText)
	local tParts = seperateString(sText, "%s")
	local sString = ""
	for n = 1, #tParts do
		sString = sString .. string.upper(string.sub(tParts[n], 1, 1)) .. string.lower(string.sub(tParts[n], 2))
	end
	sString = string.lower(string.sub(sString, 1, 1)) .. string.sub(sString, 2)
	return sString or ""
end

function deCamelCase(sText)
	local tParts = seperateString(sText, "%u", true)
	local sString = ""
	for n = 1, #tParts do
		if string.find(tParts[n], "%u") then
			sString = sString .. " " .. tParts[n]
		else
			sString = sString .. tParts[n]
		end
	end
	sString = string.upper(string.sub(sString, 1, 1)) .. string.sub(sString, 2)
	return sString or ""
end

function backOneDir(sPath)
	local sPath = "/" .. sPath
	local tParts = seperateString(sPath, "/")
	return "/" .. table.concat(tParts, "/", 1, #tParts - 1) .. "/"
end

function iterateThroughDir(sIteratorDir, fFiles, fDirs)
	local nDepth = 0
	_sIteratorDir = sIteratorDir
	local function iterate()
		nDepth = nDepth + 1
		local tDirs, tFiles = list(_sIteratorDir)
		for _, sIteratorItem in ipairs(tDirs) do
			_sIteratorDir = sIteratorDir .. sIteratorItem .. "/"
			iterate()
			nDepth = nDepth - 1
			local _t = seperateString(_sIteratorDir, "/")
			_sIteratorDir = table.concat(_t, "/", 1, nDepth) .. "/"
			_sIteratorItem = _t[#_t]
			if fDirs then fDirs() end
		end
		for _, sIteratorItem in ipairs(tFiles) do
			_sIteratorItem = sIteratorItem
			if fFiles then fFiles() end
		end
	end
	iterate()
end

function scaleBytes(nRawBytes)
	if nRawBytes == "unlimited" then
		return "Unlimited"
	elseif nRawBytes < 1000 then
		return tostring(nRawBytes) .. " B"
	elseif nRawBytes >= 1000 and nRawBytes < 1000000 then
		local nDecimalPoint = string.find(tostring(nRawBytes / 1000), "%.") or #tostring(nRawBytes)
		return string.sub(tostring(nRawBytes / 1000), 1, nDecimalPoint + 1) .. " KB"
	elseif nRawBytes >= 1000000 then
		local nDecimalPoint = string.find(tostring(nRawBytes / 1000000), "%.") or #tostring(nRawBytes)
		return string.sub(tostring(nRawBytes / 1000000), 1, nDecimalPoint + 1) .. " MB"
	end
end

function isDiskEncrypted(sSide)
	if exists(disk.getMountPath(sSide) .. "/.encrypt") then
		return true
	end
	return false
end

function encryptDir(sEncryptDir, sKey)
	local encryptDirs = function()
		fs.move(_sIteratorDir .. _sIteratorItem, _sIteratorDir .. encryption.encrypt(_sIteratorItem, sKey))
	end
	local encryptFiles = function()
		local tFile = seperateString(_sIteratorItem, "%.")
		local tData = readToTable(_sIteratorDir .. _sIteratorItem)
		for nLine = 1, #tData do
			tData[nLine] = encryption.encrypt(tData[nLine], sKey)
		end
		local sExt = tFile[2] or ""
		fWriteFromTable(_sIteratorDir .. encryption.encrypt(tFile[1], sKey) .. "." .. sExt, tData)
		fs.delete(_sIteratorDir .. _sIteratorItem)
	end
	iterateThroughDir(sEncryptDir, encryptFiles, encryptDirs)
end

function decryptDir(sDecryptDir, sKey)
	local decryptDirs = function()
		fs.move(_sIteratorDir .. _sIteratorItem, _sIteratorDir .. encryption.decrypt(_sIteratorItem, sKey))
	end
	local decryptFiles = function()
		local tFile = seperateString(_sIteratorItem, "%.")
		local tData = readToTable(_sIteratorDir .. _sIteratorItem)
		for nLine = 1, #tData do
			tData[nLine] = encryption.decrypt(tData[nLine], sKey)
		end
		local sExt = tFile[2] or ""
		fWriteFromTable(_sIteratorDir .. encryption.decrypt(tFile[1], sKey) .. "." .. sExt, tData)
		fs.delete(_sIteratorDir .. _sIteratorItem)
	end
	iterateThroughDir(sDecryptDir, decryptFiles, decryptDirs)
end