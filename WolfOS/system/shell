--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

if not os.getComputerLabel() then
	os.setComputerLabel("ID# " .. os.getComputerID())
end
print("Loading APIs...")
sleep(0.01)
for _, sAPI in ipairs(fs.list("/WolfOS/system/apis")) do
	os.loadAPI("/WolfOS/system/apis/" .. sAPI)
	print("API loaded: " .. sAPI)
end
local sModemPort = WDM.readSystemData("modem_port")
if sModemPort then
	if WPH.getType(sModemPort) ~= "modem" then
		WDM.writeSystemData(nil, "modem_port")
	elseif WDM.readSystemData("modem_state") and WPH.getType(sModemPort) == "modem" then
		print("Initiating modem...")
		rednet.open(sModemPort)
	end
end
local tServers = {}
if WDM.readServerData("mainframe_state") then
	print("Initiating mainframe...")
	local loadServer = function(sType)
		if WDM.readServerData(sType .. "_state") then
			return function() os.run({}, WDM.getSystemDir("servers") .. sType) end
		end
	end
	for _, sServer in ipairs(fs.list(WDM.getSystemDir("servers"))) do
		if not fs.isDir(WDM.getSystemDir("servers") .. sServer) then
			tServers[#tServers + 1] = loadServer(sServer)
			print("Server loaded: " .. sServer)
		end
	end
end
local sMonitorPort = WDM.readSystemData("monitor_port")
if sMonitorPort then
	if WPH.getType(sMonitorPort) ~= "monitor" then
		WDM.writeSystemData(nil, "monitor_port")
	elseif WDM.readSystemData("monitor_state") and WPH.getType(sMonitorPort) == "monitor" then
		print("Initiating monitor...")
		term.redirect(peripheral.wrap(sMonitorPort))
		print("Synchronising with monitor...")
		term.syncScreens(true)
	end
end
print("Starting WolfOS...")
print("Loading User Interface...")
sleep(0.01)
WUI.bootScreen("Initiating WolfOS", "Please wait...")
local runOS = function()
	os.run({}, WDM.getSystemDir("system") .. "startupMenu")
end
local runClock = WUI.setupClock()
parallel.waitForAny(runOS, runClock, unpack(tServers))