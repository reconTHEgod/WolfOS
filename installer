--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

--Defining constants, variables and local functions
local tArgs = {...}
local bStandalone = tArgs[1]
if bStandalone ~= false then bStandalone = true end
local bOnline = false
if bStandalone then bOnline = true end

local sVer, nInstallerVer = "1.4.0_b6", 1.0
local sHttpPath = "https://raw.github.com/toxicwolf/WolfOS/master/"

local tDirs = {"/boot", "/WolfOS", "/WolfOS/system", "/WolfOS/system/apis", "/WolfOS/system/data", "/WolfOS/server", "/WolfOS/server/data", "/WolfOS/appdata",
		"/WolfOS/users", "/WolfOS/utilities", "/WolfOS/programs", "/WolfOS/utilities/diskManager.util", "/WolfOS/programs/musicPlayer.prog"}
local tFiles = {
	{["put"] = "boot/WolfOS"},
	{["put"] = "WolfOS/system/apis/bit32"},
	{["put"] = "WolfOS/system/apis/encryption"},
	{["put"] = "WolfOS/system/apis/hash"},
	{["put"] = "WolfOS/system/apis/term"},
	{["put"] = "WolfOS/system/apis/WAU"},
	{["put"] = "WolfOS/system/apis/WDM"},
	{["put"] = "WolfOS/system/apis/WNC"},
	{["put"] = "WolfOS/system/apis/WPH"},
	{["put"] = "WolfOS/system/apis/WUI"},
	{["put"] = "WolfOS/system/controlPanel"},
	{["put"] = "WolfOS/system/login"},
	{["put"] = "WolfOS/system/mainMenu"},
	{["put"] = "WolfOS/system/programMenu"},
	{["put"] = "WolfOS/system/shell"},
	{["put"] = "WolfOS/system/startupMenu"},
	{["put"] = "WolfOS/system/utilityMenu"},
	{["put"] = "WolfOS/server/user"},
	{["put"] = "WolfOS/server/email"},
	{["put"] = "WolfOS/programs/musicPlayer.prog/musicPlayer"},
	--{["put"] = "WolfOS/programs/emailClient.prog/emailClient"},
	{["put"] = "WolfOS/utilities/diskManager.util/diskManager"},
}

local function removeAllFiles()
	if fs.exists("/WolfOS") then fs.delete("/WolfOS") end
	if fs.exists("/boot/WolfOS") then fs.delete("/boot/WolfOS") end
end

local function fetchFile(sPath)
	local ok, p1 = pcall(function()
		local f = fs.open(sPath, "r")
		local t = f.readAll()
		f.close()
		return t
	end)
	if not ok and bOnline then
		ok, p1 = pcall(function()
			if not http then return error("HTTP API not enabled", 0) end
			http.request(sPath)
			while true do
				local sEvent, p1, p2 = coroutine.yield()
				if sEvent == "http_success" then
					t =  p2.readAll()
					p2.close()
					return t
				elseif sEvent == "http_failure" then
					error("HTTP failure when downloading:\n\n" .. sPath, 0)
				end
			end
		end)
		if not ok then return false, p1 end
	end
	return true, p1
end

local function putFile(sFetchPath, tPutPaths)
	if type(tPutPaths) ~= "table" then tPutPaths = {tPutPaths} end
	for _, sPutPath in ipairs(tPutPaths) do
		local ok, p1 = fetchFile(sFetchPath)
		if ok then
			local f = fs.open(sPutPath, "w")
			f.write(p1)
			f.close()
		else
			term.clear()
			term.setCursorPos(1, 1)
			print(p1)
			print( "\nPress any key to continue..." )
			coroutine.yield( "key" )
			removeAllFiles()
			os.shutdown()
		end	
	end
end

--Fetching and loading required APIs
local tAPIs = {tFiles[2], tFiles[3], tFiles[4], tFiles[7], tFiles[10]}
if bStandalone then
	for _, v in ipairs(tAPIs) do
		putFile(sHttpPath .. "os_files/" .. v.put, "/disk/os_files/" .. v.put)
	end
end
for _, v in ipairs(tAPIs) do
	os.loadAPI("/disk/os_files/" .. v.put)
end

--Start installer GUI
WUI.bootScreen("Initiating WolfOS Installer", "Please wait...")

local tChoices
if bStandalone then
	tChoices = {"Download and install latest WolfOS version", "\\", "Exit"}
else
	tChoices = {"Install WolfOS offline", "\\", "Exit"}
	if http then
		tChoices = WDM.mergeTables({"Install WolfOS and download updates"}, tChoices)
	end
end

local sSelection = WUI.menu(tChoices, "WolfOS " .. sVer, "WolfOS Installer")

if sSelection == "Exit" then
	os.shutdown()
elseif sSelection == "Install WolfOS and download updates" then
	bOnline = true
	local nLatestInstallerVer = tonumber(fetchFile(sHttpPath .. "LATEST_INSTALLER_VERSION"))
	if nLatestInstallerVer > nInstallerVer then
		putFile("/disk/installer", sHttpPath .. "installer")
		putFile("/disk/boot/WolfOS Installer", sHttpPath .. "boot/WolfOS Installer")
		WUI.clear("WolfOS Installer")
		WUI.slowPrint("WolfOS Installer has been updated to v" .. nLatestInstallerVer .. ". \n")
		WUI.slowPrint("Rebooting...")
		sleep(2)
		os.reboot()
	end
end

--Processing file paths
if bDisk then
	for _, v in ipairs(tFiles) do
		v.fetch = "disk/os_files/" .. v.put 
	end
else
	for _, v in ipairs(tFiles) do
		v.fetch = sHttpPath .. "os_files/" .. v.put 
	end
end

--Install WolfOS
local s1, s2 = "", ""
local function redraw()
	WUI.clear("WolfOS Installer")
	WUI.fastPrint("WolfOS " .. sVer .. " \n")
	WUI.fastPrint(s1 .. " \n")
	WUI.fastPrint(s2)
end

s1 = "Creating directories..."
redraw()
for _, v in ipairs(tDirs) do
	if not fs.isDir(v) then
		fs.makeDir(v)
		s2 = v
		redraw()
		sleep(0.01)
	end
end
if bOnline then s1 = "Downloading and installing files..." else s1 = "Installing files..." end
s2 = ""
redraw()
for _, v in ipairs(tFiles) do
	if bOnline then
		putFile(v.fetch, {v.put, "/disk/os_files/" .. v.put})
	else
		putFile(v.fetch, v.put)
	end
	s2 = v.put
	redraw()
	sleep(0.01)
end

s1 = "Creating data files..."
s2 = ""
redraw()
WDM.writeSystemData({["version"] = sVer, ["offline"] = true})
WDM.writeServerData({})

--Finish installation
WUI.clear("WolfOS Installer")
WUI.slowPrint("WolfOS " .. sVer .. " installation is complete! \n")
WUI.slowPrint( "Press any key to continue..." )
coroutine.yield( "key" )
local sDrive = fs.getDrive("/disk")
if sDrive then disk.eject(sDrive) end
os.reboot()