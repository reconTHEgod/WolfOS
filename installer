--[[WolfOS is the intellectual property of James Chapman (toxic.wolf@hotmail.co.uk).
Please ask for permission before attempting to redistribute any code relating to WolfOS IN ANY FORM.]]--

--Defining constants, variables and local functions
local tArgs = {...}
local bStandalone = tArgs[1]
if bStandalone ~= false then bStandalone = true end
local bOnline = false
if bStandalone then bOnline = true end

local sGitUser, sGitRepo, sGitBranch = "toxicwolf", "WolfOS", "master"
local sInstallPath = "/"
local sBlackList = [[
@installer
]]

local function printError(sError)
	term.clear()
	term.setCursorPos(1, 1)
	print("Error: " .. sError .. "\n\nPress any key to continue...")
	coroutine.yield("key")
	os.shutdown()
end

local s1, s2
local function redraw()
	if WUI then
		WUI.clear("WolfOS Installer")
		WUI.fastPrint(s1 .. "\n\n" .. s2)
	end
end

local function installFile(sLocation, sPath, sName)
	sPath = string.gmatch(sPath, "os_files/([%w%_%.% %-%+%,%;%:%*%#%=%/]+)")()
	sDir = string.gmatch(sPath, "([%w%_%.% %-%+%,%;%:%*%#%=%/]+)/" .. sName .. "$")()
	if sDir ~= nil and not fs.isDir(sDir) then
		fs.makeDir(sDir)
	end
	if bOnline then s1 = "Downloading and installing file:" else s1 = "Installing file:" end
	s2 = "/" .. sPath
	redraw()
	local sData = nil
	if bOnline then
		sData = http.get(sLocation).readAll()
	else
		local hFile = fs.open(sLocation, "r")
		sData = hFile.readAll()
		hFile.close()
	end
	redraw()
	local hFile = fs.open(sPath, "w")
	hFile.write(sData)
	hFile.close()
end

local function getGitContents(sPath)
	local tType, tPath, tName = {}, {}, {}
	local sResponse = http.get("https://api.github.com/repos/"..sGitUser.."/"..sGitRepo.."/contents/"..sPath.."?ref="..sGitBranch)
	if sResponse then
		sResponse = sResponse.readAll()
		if sResponse ~= nil then
			for str in string.gmatch(sResponse, '"type":"(%w+)"') do table.insert(tType, str) end
			for str in string.gmatch(sResponse, '"path":"([^\"]+)"') do table.insert(tPath, str) end
			for str in string.gmatch(sResponse, '"name":"([^\"]+)"') do table.insert(tName, str) end
			return true, tType, tPath, tName
		end
	end
	return false, "Can't resolve URL"
end

local function isBlackListed(sPath)
	if string.gmatch(sBlackList, "@" .. sPath)() ~= nil then
		return true
	end
end

local function main(sPath)
	if bOnline then
		local bOk, p1, tPath, tName = getGitContents(sPath)
		if bOk then
			local tType = p1
			for i, sData in pairs(tType) do
				if sData == "file" then
					local checkPath = http.get("https://raw.github.com/"..sGitUser.."/"..sGitRepo.."/"..sGitBranch.."/"..tPath[i])
					if checkPath == nil then
						tPath[i] = tPath[i] .. "/" .. tName[i]
					end
					local _sPath = tPath[i]
					if sInstallPath ~= "" then _sPath = fs.combine(sInstallPath, tPath[i]) end
					if not isBlackListed(tPath[i]) then
						installFile("https://raw.github.com/"..sGitUser.."/"..sGitRepo.."/"..sGitBranch.."/"..tPath[i], _sPath, tName[i])
					end
				end
			end
			for i, sData in pairs(tType) do
				if sData == "dir" then
					main(tPath[i])
				end
			end
		else
			printError(p1)
		end
	else
		for i, _sPath in pairs(fs.list(sPath)) do
			if not fs.isDir(fs.combine(sPath, _sPath)) then
				if not isBlackListed(_sPath) then
					if sInstallPath ~= "" then _path = fs.combine(sInstallPath, string.sub(sPath, 6)) .. "/" .. _sPath end
					installFile(fs.combine(sPath, _sPath), _path, _sPath)
				end
			end
		end
		for i, _sPath in pairs(fs.list(sPath)) do
			if fs.isDir(fs.combine(sPath, _sPath)) then
				main(fs.combine(sPath, _sPath))
			end
		end
	end
end

--Fetching and loading required UI API
if not http then
	printError("HTTP API not enabled")
end
local bAPICheck = false
local hFile = nil
if bStandalone then
	downloadFile("https://raw.github.com/"..sGitUser.."/"..sGitRepo.."/"..sGitBranch.."/os_files/WolfOS/system/apis/WUI", "/os_files/WolfOS/system/apis/WUI", "WUI")
	bAPICheck = os.loadAPI("/WolfOS/system/apis/WUI")
	hFile = fs.open("/WolfOS/system/apis/WUI", "r")
else
	bAPICheck = os.loadAPI("/disk/os_files/WolfOS/system/apis/WUI")
	hFile = fs.open("/disk/os_files/WolfOS/system/apis/WUI", "r")
end
if not bAPICheck then
	printError("Corrupt install disk")
end
local sVer = string.sub(hFile.readLine(), 3)
hFile.close()

--Start installer GUI
WUI.bootScreen("Initiating WolfOS Installer", "Please wait...")

local tChoices
if bStandalone then
	tChoices = {"Download and install latest WolfOS version", "\\", "Exit"}
else
	tChoices = {"Install WolfOS offline", "\\", "Exit"}
	if http then
		table.insert(tChoices, 1, "Install WolfOS and download updates")
	end
end

local sSelection = WUI.menu(tChoices, "WolfOS " .. sVer, "WolfOS Installer")

if sSelection == "Exit" then
	os.shutdown()
elseif sSelection == "Install WolfOS and download updates" then
	bOnline = true
end

local sSha = ""
if bOnline then
	main("os_files")
	sSha = http.get("https://api.github.com/repos/"..sGitUser.."/"..sGitRepo.."/branches/"..sGitBranch)
	sSha = string.gmatch(sSha.readAll(), '"sha":"(%w+)"')()
else
	main("disk/os_files")
end

os.loadAPI("/WolfOS/system/apis/encryption")
os.loadAPI("/WolfOS/system/apis/WDM")

if not fs.isDir("/WolfOS/data") then fs.makeDir("/WolfOS/data") end

local tSystemData = {}
if WDM.exists("/WolfOS/data/system.dat") then
	tSystemData = textutils.unserialize(encryption.fromBase64(WDM.readAllText(WDM.getSystemDir("data") .. "system.dat")))
end
if sSha ~= "" then tSystemData["sha"] = sSha end
if tSystemData["offline"] == nil then tSystemData["offline"] = true end
tSystemData["version"] = sVer
WDM.fWrite(WDM.getSystemDir("data") .. "system.dat", encryption.toBase64(textutils.serialize(tSystemData)))
if not WDM.exists("/WolfOS/data/server.dat") then WDM.fWrite(WDM.getSystemDir("data") .. "server.dat", encryption.toBase64(textutils.serialize({}))) end

--Finish installation
WUI.clear("WolfOS Installer")
WUI.slowPrint("WolfOS " .. sVer .. " installation is complete!\n")
WUI.slowPrint("Press any key to continue...")
coroutine.yield("key")
os.shutdown()